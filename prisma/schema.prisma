generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type GroupsMembersList {
  name   String
  role   String
  userId String
}

model comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  name      String
  text      String
  threadId  String   @db.ObjectId
  userId    String
}

/// This collection uses a JSON Schema defined in the database, which requires additional setup for migrations. Visit https://pris.ly/d/mongodb-json-schema for more info.
model groups {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  activity    Int
  createdAt   DateTime            @db.Date
  description String
  isPublic    Boolean
  members     Int
  membersList GroupsMembersList[]
  name        String
  orgId       String
  owner       String
}

model nominations {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  email     String
  label     String
  name      String
  threadId  String   @db.ObjectId
  userId    String
}

/// This collection uses a JSON Schema defined in the database, which requires additional setup for migrations. Visit https://pris.ly/d/mongodb-json-schema for more info.
model threads {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  creatorId    String
  deadline     String
  description  String
  groupId      String   @db.ObjectId
  status       String
  title        String
  totalMembers Int
  voteType     String
}

model votes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  threadId  String   @db.ObjectId
  vote      String
  weight    Int
  createdAt DateTime @db.Date
  updatedAt DateTime? @db.Date
}
